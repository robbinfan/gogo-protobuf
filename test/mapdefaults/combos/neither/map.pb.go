// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/neither/map.proto

package mapdefaults

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MapTest struct {
	StrStr               map[string]string `protobuf:"bytes,1,rep,name=str_str,json=strStr,proto3" json:"str_str,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MapTest) Reset()      { *m = MapTest{} }
func (*MapTest) ProtoMessage() {}
func (*MapTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd5e5326d33da91, []int{0}
}
func (m *MapTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapTest.Unmarshal(m, b)
}
func (m *MapTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapTest.Marshal(b, m, deterministic)
}
func (m *MapTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapTest.Merge(m, src)
}
func (m *MapTest) XXX_Size() int {
	return xxx_messageInfo_MapTest.Size(m)
}
func (m *MapTest) XXX_DiscardUnknown() {
	xxx_messageInfo_MapTest.DiscardUnknown(m)
}

var xxx_messageInfo_MapTest proto.InternalMessageInfo

type FakeMap struct {
	Entries              []*FakeMapEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FakeMap) Reset()      { *m = FakeMap{} }
func (*FakeMap) ProtoMessage() {}
func (*FakeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd5e5326d33da91, []int{1}
}
func (m *FakeMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FakeMap.Unmarshal(m, b)
}
func (m *FakeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FakeMap.Marshal(b, m, deterministic)
}
func (m *FakeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FakeMap.Merge(m, src)
}
func (m *FakeMap) XXX_Size() int {
	return xxx_messageInfo_FakeMap.Size(m)
}
func (m *FakeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_FakeMap.DiscardUnknown(m)
}

var xxx_messageInfo_FakeMap proto.InternalMessageInfo

type FakeMapEntry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Other                string   `protobuf:"bytes,3,opt,name=other,proto3" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FakeMapEntry) Reset()      { *m = FakeMapEntry{} }
func (*FakeMapEntry) ProtoMessage() {}
func (*FakeMapEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cd5e5326d33da91, []int{2}
}
func (m *FakeMapEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FakeMapEntry.Unmarshal(m, b)
}
func (m *FakeMapEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FakeMapEntry.Marshal(b, m, deterministic)
}
func (m *FakeMapEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FakeMapEntry.Merge(m, src)
}
func (m *FakeMapEntry) XXX_Size() int {
	return xxx_messageInfo_FakeMapEntry.Size(m)
}
func (m *FakeMapEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FakeMapEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FakeMapEntry proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MapTest)(nil), "mapdefaults.MapTest")
	proto.RegisterMapType((map[string]string)(nil), "mapdefaults.MapTest.StrStrEntry")
	proto.RegisterType((*FakeMap)(nil), "mapdefaults.FakeMap")
	proto.RegisterType((*FakeMapEntry)(nil), "mapdefaults.FakeMapEntry")
}

func init() { proto.RegisterFile("combos/neither/map.proto", fileDescriptor_8cd5e5326d33da91) }

var fileDescriptor_8cd5e5326d33da91 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x3f, 0x4f, 0x32, 0x41,
	0x10, 0x87, 0x77, 0x20, 0x2f, 0x97, 0x77, 0xb1, 0x30, 0x17, 0x8b, 0x93, 0x62, 0x42, 0xa8, 0x68,
	0xbc, 0x4b, 0xa4, 0x11, 0x0b, 0x0b, 0xa3, 0x56, 0xd2, 0x80, 0xbd, 0xd9, 0xc3, 0xe5, 0x4f, 0xe0,
	0xd8, 0xcb, 0xee, 0x9e, 0x09, 0x95, 0x7c, 0x1c, 0x4b, 0x4b, 0x3f, 0x02, 0x25, 0xa5, 0x25, 0xbb,
	0x36, 0x96, 0x94, 0x94, 0x86, 0xbd, 0x33, 0x39, 0x3b, 0xbb, 0x79, 0x7e, 0xfb, 0xec, 0xcc, 0x64,
	0x68, 0x30, 0x14, 0x49, 0x2c, 0x54, 0xb4, 0xe0, 0x53, 0x3d, 0xe1, 0x32, 0x4a, 0x58, 0x1a, 0xa6,
	0x52, 0x68, 0xe1, 0xd7, 0x13, 0x96, 0x3e, 0xf1, 0x11, 0xcb, 0xe6, 0x5a, 0x35, 0xce, 0xc6, 0x53,
	0x3d, 0xc9, 0xe2, 0x70, 0x28, 0x92, 0x68, 0x2c, 0xc6, 0x22, 0x72, 0x4e, 0x9c, 0x8d, 0x1c, 0x39,
	0x70, 0x55, 0xfe, 0xb7, 0xf5, 0x42, 0xbd, 0x1e, 0x4b, 0x1f, 0xb8, 0xd2, 0x7e, 0x97, 0x7a, 0x4a,
	0xcb, 0x47, 0xa5, 0x65, 0x00, 0xcd, 0x6a, 0xbb, 0x7e, 0xde, 0x0c, 0x4b, 0x8d, 0xc3, 0x42, 0x0b,
	0x07, 0x5a, 0x0e, 0xb4, 0xbc, 0x5d, 0x68, 0xb9, 0xec, 0xd7, 0x94, 0x83, 0x46, 0x97, 0xd6, 0x4b,
	0xb1, 0x7f, 0x4c, 0xab, 0x33, 0xbe, 0x0c, 0xa0, 0x09, 0xed, 0xff, 0xfd, 0x43, 0xe9, 0x9f, 0xd0,
	0x7f, 0xcf, 0x6c, 0x9e, 0xf1, 0xa0, 0xe2, 0xb2, 0x1c, 0x2e, 0x2b, 0x17, 0xd0, 0xba, 0xa2, 0xde,
	0x1d, 0x9b, 0xf1, 0x1e, 0x4b, 0xfd, 0x0e, 0xf5, 0xf8, 0x42, 0xcb, 0x29, 0x57, 0xc5, 0x02, 0xa7,
	0xbf, 0x16, 0x28, 0xb4, 0x7c, 0xf2, 0x8f, 0xd9, 0xba, 0xa7, 0x47, 0xe5, 0x87, 0xbf, 0xce, 0x3e,
	0xa4, 0xe2, 0x70, 0xc7, 0xa0, 0x9a, 0xa7, 0x0e, 0xae, 0x6f, 0xd6, 0x06, 0xc9, 0xc6, 0x20, 0xf9,
	0x30, 0x48, 0xb6, 0x06, 0x61, 0x67, 0x10, 0xf6, 0x06, 0x61, 0x65, 0x11, 0x5e, 0x2d, 0xc2, 0x9b,
	0x45, 0x78, 0xb7, 0x08, 0x6b, 0x8b, 0x64, 0x63, 0x91, 0x6c, 0x2d, 0xc2, 0x97, 0x45, 0xb2, 0xb3,
	0x08, 0x7b, 0x8b, 0x64, 0xf5, 0x89, 0x24, 0xae, 0xb9, 0xdb, 0x76, 0xbe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x9d, 0x34, 0x83, 0xd1, 0xb3, 0x01, 0x00, 0x00,
}

func (this *MapTest) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MapDescription()
}
func (this *FakeMap) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MapDescription()
}
func (this *FakeMapEntry) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MapDescription()
}
func MapDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4034 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5b, 0x70, 0xe3, 0xd6,
		0x79, 0x16, 0x6f, 0x12, 0xf9, 0x93, 0xa2, 0x20, 0x48, 0xd6, 0x72, 0xe5, 0x98, 0xab, 0xa5, 0xed,
		0xac, 0x6c, 0xc7, 0x52, 0x66, 0x6f, 0xde, 0xe5, 0x36, 0x76, 0x29, 0x89, 0xab, 0xc8, 0x95, 0x44,
		0x05, 0x94, 0xe2, 0x4b, 0xa6, 0x83, 0x39, 0x02, 0x8f, 0x28, 0xac, 0x40, 0x00, 0x01, 0xc0, 0x5d,
		0x6b, 0xa7, 0x33, 0xdd, 0x8e, 0x7b, 0x99, 0x4c, 0xef, 0x97, 0x99, 0x36, 0xae, 0xe3, 0x36, 0xe9,
		0x34, 0x4e, 0xd3, 0x5b, 0xd2, 0xb4, 0x69, 0x92, 0xbe, 0xb4, 0x0f, 0x69, 0xfd, 0xd4, 0x49, 0xde,
		0xfa, 0xd0, 0x07, 0xaf, 0xe2, 0x99, 0xa6, 0xad, 0xdb, 0x3a, 0xed, 0x3e, 0x78, 0xc6, 0x2f, 0x9d,
		0x73, 0x03, 0x01, 0x92, 0x5a, 0x40, 0x99, 0xb1, 0xfd, 0x44, 0x9e, 0xff, 0xfc, 0xdf, 0x87, 0xff,
		0xfc, 0xe7, 0x3f, 0xe7, 0xff, 0xcf, 0x01, 0xe0, 0x47, 0x55, 0x98, 0x6b, 0x5b, 0x56, 0xdb, 0xc0,
		0x8b, 0xb6, 0x63, 0x79, 0xd6, 0x6e, 0x77, 0x6f, 0xb1, 0x85, 0x5d, 0xcd, 0xd1, 0x6d, 0xcf, 0x72,
		0x16, 0xa8, 0x4c, 0x9e, 0x60, 0x1a, 0x0b, 0x42, 0xa3, 0xb2, 0x01, 0x93, 0xd7, 0x75, 0x03, 0xaf,
		0xf8, 0x8a, 0x4d, 0xec, 0xc9, 0x57, 0x20, 0xbd, 0xa7, 0x1b, 0xb8, 0x94, 0x98, 0x4b, 0xcd, 0xe7,
		0xcf, 0x3f, 0xb2, 0xd0, 0x07, 0x5a, 0x08, 0x23, 0xb6, 0x88, 0x58, 0xa1, 0x88, 0xca, 0x5b, 0x69,
		0x98, 0x1a, 0xd2, 0x2b, 0xcb, 0x90, 0x36, 0x51, 0x87, 0x30, 0x26, 0xe6, 0x73, 0x0a, 0xfd, 0x2f,
		0x97, 0x60, 0xcc, 0x46, 0xda, 0x01, 0x6a, 0xe3, 0x52, 0x92, 0x8a, 0x45, 0x53, 0x2e, 0x03, 0xb4,
		0xb0, 0x8d, 0xcd, 0x16, 0x36, 0xb5, 0xc3, 0x52, 0x6a, 0x2e, 0x35, 0x9f, 0x53, 0x02, 0x12, 0xf9,
		0x09, 0x98, 0xb4, 0xbb, 0xbb, 0x86, 0xae, 0xa9, 0x01, 0x35, 0x98, 0x4b, 0xcd, 0x67, 0x14, 0x89,
		0x75, 0xac, 0xf4, 0x94, 0xcf, 0xc1, 0xc4, 0x2d, 0x8c, 0x0e, 0x82, 0xaa, 0x79, 0xaa, 0x5a, 0x24,
		0xe2, 0x80, 0xe2, 0x32, 0x14, 0x3a, 0xd8, 0x75, 0x51, 0x1b, 0xab, 0xde, 0xa1, 0x8d, 0x4b, 0x69,
		0x3a, 0xfa, 0xb9, 0x81, 0xd1, 0xf7, 0x8f, 0x3c, 0xcf, 0x51, 0xdb, 0x87, 0x36, 0x96, 0x6b, 0x90,
		0xc3, 0x66, 0xb7, 0xc3, 0x18, 0x32, 0xc7, 0xf8, 0xaf, 0x6e, 0x76, 0x3b, 0xfd, 0x2c, 0x59, 0x02,
		0xe3, 0x14, 0x63, 0x2e, 0x76, 0x6e, 0xea, 0x1a, 0x2e, 0x8d, 0x52, 0x82, 0x73, 0x03, 0x04, 0x4d,
		0xd6, 0xdf, 0xcf, 0x21, 0x70, 0xf2, 0x32, 0xe4, 0xf0, 0x4b, 0x1e, 0x36, 0x5d, 0xdd, 0x32, 0x4b,
		0x63, 0x94, 0xe4, 0xd1, 0x21, 0xb3, 0x88, 0x8d, 0x56, 0x3f, 0x45, 0x0f, 0x27, 0x5f, 0x86, 0x31,
		0xcb, 0xf6, 0x74, 0xcb, 0x74, 0x4b, 0xd9, 0xb9, 0xc4, 0x7c, 0xfe, 0xfc, 0x47, 0x86, 0x06, 0x42,
		0x83, 0xe9, 0x28, 0x42, 0x59, 0x5e, 0x03, 0xc9, 0xb5, 0xba, 0x8e, 0x86, 0x55, 0xcd, 0x6a, 0x61,
		0x55, 0x37, 0xf7, 0xac, 0x52, 0x8e, 0x12, 0x9c, 0x19, 0x1c, 0x08, 0x55, 0x5c, 0xb6, 0x5a, 0x78,
		0xcd, 0xdc, 0xb3, 0x94, 0xa2, 0x1b, 0x6a, 0xcb, 0x33, 0x30, 0xea, 0x1e, 0x9a, 0x1e, 0x7a, 0xa9,
		0x54, 0xa0, 0x11, 0xc2, 0x5b, 0x95, 0x6f, 0x8f, 0xc2, 0x44, 0x9c, 0x10, 0xbb, 0x06, 0x99, 0x3d,
		0x32, 0xca, 0x52, 0xf2, 0x24, 0x3e, 0x60, 0x98, 0xb0, 0x13, 0x47, 0x7f, 0x4c, 0x27, 0xd6, 0x20,
		0x6f, 0x62, 0xd7, 0xc3, 0x2d, 0x16, 0x11, 0xa9, 0x98, 0x31, 0x05, 0x0c, 0x34, 0x18, 0x52, 0xe9,
		0x1f, 0x2b, 0xa4, 0x9e, 0x87, 0x09, 0xdf, 0x24, 0xd5, 0x41, 0x66, 0x5b, 0xc4, 0xe6, 0x62, 0x94,
		0x25, 0x0b, 0x75, 0x81, 0x53, 0x08, 0x4c, 0x29, 0xe2, 0x50, 0x5b, 0x5e, 0x01, 0xb0, 0x4c, 0x6c,
		0xed, 0xa9, 0x2d, 0xac, 0x19, 0xa5, 0xec, 0x31, 0x5e, 0x6a, 0x10, 0x95, 0x01, 0x2f, 0x59, 0x4c,
		0xaa, 0x19, 0xf2, 0xd5, 0x5e, 0xa8, 0x8d, 0x1d, 0x13, 0x29, 0x1b, 0x6c, 0x91, 0x0d, 0x44, 0xdb,
		0x0e, 0x14, 0x1d, 0x4c, 0xe2, 0x1e, 0xb7, 0xf8, 0xc8, 0x72, 0xd4, 0x88, 0x85, 0xc8, 0x91, 0x29,
		0x1c, 0xc6, 0x06, 0x36, 0xee, 0x04, 0x9b, 0xf2, 0xc3, 0xe0, 0x0b, 0x54, 0x1a, 0x56, 0x40, 0x77,
		0xa1, 0x82, 0x10, 0x6e, 0xa2, 0x0e, 0x9e, 0xbd, 0x0d, 0xc5, 0xb0, 0x7b, 0xe4, 0x69, 0xc8, 0xb8,
		0x1e, 0x72, 0x3c, 0x1a, 0x85, 0x19, 0x85, 0x35, 0x64, 0x09, 0x52, 0xd8, 0x6c, 0xd1, 0x5d, 0x2e,
		0xa3, 0x90, 0xbf, 0xf2, 0x4f, 0xf6, 0x06, 0x9c, 0xa2, 0x03, 0xfe, 0xe8, 0xe0, 0x8c, 0x86, 0x98,
		0xfb, 0xc7, 0x3d, 0xfb, 0x14, 0x8c, 0x87, 0x06, 0x10, 0xf7, 0xd1, 0x95, 0x9f, 0x81, 0x07, 0x86,
		0x52, 0xcb, 0xcf, 0xc3, 0x74, 0xd7, 0xd4, 0x4d, 0x0f, 0x3b, 0xb6, 0x83, 0x49, 0xc4, 0xb2, 0x47,
		0x95, 0xfe, 0x6d, 0xec, 0x98, 0x98, 0xdb, 0x09, 0x6a, 0x33, 0x16, 0x65, 0xaa, 0x3b, 0x28, 0x7c,
		0x3c, 0x97, 0xfd, 0xe1, 0x98, 0x74, 0xe7, 0xce, 0x9d, 0x3b, 0xc9, 0xca, 0x3f, 0x8c, 0xc2, 0xf4,
		0xb0, 0x35, 0x33, 0x74, 0xf9, 0xce, 0xc0, 0xa8, 0xd9, 0xed, 0xec, 0x62, 0x87, 0x3a, 0x29, 0xa3,
		0xf0, 0x96, 0x5c, 0x83, 0x8c, 0x81, 0x76, 0xb1, 0x51, 0x4a, 0xcf, 0x25, 0xe6, 0x8b, 0xe7, 0x9f,
		0x88, 0xb5, 0x2a, 0x17, 0xd6, 0x09, 0x44, 0x61, 0x48, 0xf9, 0x69, 0x48, 0xf3, 0x2d, 0x9a, 0x30,
		0x3c, 0x1e, 0x8f, 0x81, 0xac, 0x25, 0x85, 0xe2, 0xe4, 0x07, 0x21, 0x47, 0x7e, 0x59, 0x6c, 0x8c,
		0x52, 0x9b, 0xb3, 0x44, 0x40, 0xe2, 0x42, 0x9e, 0x85, 0x2c, 0x5d, 0x26, 0x2d, 0x2c, 0x52, 0x9b,
		0xdf, 0x26, 0x81, 0xd5, 0xc2, 0x7b, 0xa8, 0x6b, 0x78, 0xea, 0x4d, 0x64, 0x74, 0x31, 0x0d, 0xf8,
		0x9c, 0x52, 0xe0, 0xc2, 0x4f, 0x13, 0x99, 0x7c, 0x06, 0xf2, 0x6c, 0x55, 0xe9, 0x66, 0x0b, 0xbf,
		0x44, 0x77, 0xcf, 0x8c, 0xc2, 0x16, 0xda, 0x1a, 0x91, 0x90, 0xc7, 0xdf, 0x70, 0x2d, 0x53, 0x84,
		0x26, 0x7d, 0x04, 0x11, 0xd0, 0xc7, 0x3f, 0xd5, 0xbf, 0x71, 0x3f, 0x34, 0x7c, 0x78, 0x03, 0x6b,
		0xe9, 0x1c, 0x4c, 0x50, 0x8d, 0x0b, 0x7c, 0xea, 0x91, 0x51, 0x9a, 0x9c, 0x4b, 0xcc, 0x67, 0x95,
		0x22, 0x13, 0x37, 0xb8, 0xb4, 0xf2, 0xcd, 0x24, 0xa4, 0xe9, 0xc6, 0x32, 0x01, 0xf9, 0xed, 0x17,
		0xb6, 0xea, 0xea, 0x4a, 0x63, 0x67, 0x69, 0xbd, 0x2e, 0x25, 0xe4, 0x22, 0x00, 0x15, 0x5c, 0x5f,
		0x6f, 0xd4, 0xb6, 0xa5, 0xa4, 0xdf, 0x5e, 0xdb, 0xdc, 0xbe, 0x7c, 0x51, 0x4a, 0xf9, 0x80, 0x1d,
		0x26, 0x48, 0x07, 0x15, 0x2e, 0x9c, 0x97, 0x32, 0xb2, 0x04, 0x05, 0x46, 0xb0, 0xf6, 0x7c, 0x7d,
		0xe5, 0xf2, 0x45, 0x69, 0x34, 0x2c, 0xb9, 0x70, 0x5e, 0x1a, 0x93, 0xc7, 0x21, 0x47, 0x25, 0x4b,
		0x8d, 0xc6, 0xba, 0x94, 0xf5, 0x39, 0x9b, 0xdb, 0xca, 0xda, 0xe6, 0xaa, 0x94, 0xf3, 0x39, 0x57,
		0x95, 0xc6, 0xce, 0x96, 0x04, 0x3e, 0xc3, 0x46, 0xbd, 0xd9, 0xac, 0xad, 0xd6, 0xa5, 0xbc, 0xaf,
		0xb1, 0xf4, 0xc2, 0x76, 0xbd, 0x29, 0x15, 0x42, 0x66, 0x5d, 0x38, 0x2f, 0x8d, 0xfb, 0x8f, 0xa8,
		0x6f, 0xee, 0x6c, 0x48, 0x45, 0x79, 0x12, 0xc6, 0xd9, 0x23, 0x84, 0x11, 0x13, 0x7d, 0xa2, 0xcb,
		0x17, 0x25, 0xa9, 0x67, 0x08, 0x63, 0x99, 0x0c, 0x09, 0x2e, 0x5f, 0x94, 0xe4, 0xca, 0x32, 0x64,
		0x68, 0x18, 0xca, 0x32, 0x14, 0xd7, 0x6b, 0x4b, 0xf5, 0x75, 0xb5, 0xb1, 0xb5, 0xbd, 0xd6, 0xd8,
		0xac, 0xad, 0x4b, 0x89, 0x9e, 0x4c, 0xa9, 0x7f, 0x6a, 0x67, 0x4d, 0xa9, 0xaf, 0x48, 0xc9, 0xa0,
		0x6c, 0xab, 0x5e, 0xdb, 0xae, 0xaf, 0x48, 0xa9, 0x8a, 0x06, 0xd3, 0xc3, 0x36, 0xd4, 0xa1, 0x4b,
		0x28, 0x10, 0x0b, 0xc9, 0x63, 0x62, 0x81, 0x72, 0xf5, 0xc7, 0x42, 0xe5, 0x07, 0x49, 0x98, 0x1a,
		0x92, 0x54, 0x86, 0x3e, 0xe4, 0x19, 0xc8, 0xb0, 0x58, 0x66, 0x69, 0xf6, 0xb1, 0xa1, 0xd9, 0x89,
		0x46, 0xf6, 0x40, 0xaa, 0xa5, 0xb8, 0x60, 0xa9, 0x91, 0x3a, 0xa6, 0xd4, 0x20, 0x14, 0x03, 0x01,
		0xfb, 0xd3, 0x03, 0x9b, 0x3f, 0xcb, 0x8f, 0x97, 0xe3, 0xe4, 0x47, 0x2a, 0x3b, 0x59, 0x12, 0xc8,
		0x0c, 0x49, 0x02, 0xd7, 0x60, 0x72, 0x80, 0x28, 0xf6, 0x66, 0xfc, 0x72, 0x02, 0x4a, 0xc7, 0x39,
		0x27, 0x62, 0x4b, 0x4c, 0x86, 0xb6, 0xc4, 0x6b, 0xfd, 0x1e, 0x3c, 0x7b, 0xfc, 0x24, 0x0c, 0xcc,
		0xf5, 0xeb, 0x09, 0x98, 0x19, 0x5e, 0x52, 0x0e, 0xb5, 0xe1, 0x69, 0x18, 0xed, 0x60, 0x6f, 0xdf,
		0x12, 0x65, 0xd5, 0x47, 0x87, 0x24, 0x6b, 0xd2, 0xdd, 0x3f, 0xd9, 0x1c, 0x15, 0xcc, 0xf6, 0xa9,
		0xe3, 0xea, 0x42, 0x66, 0xcd, 0x80, 0xa5, 0x9f, 0x4b, 0xc2, 0x03, 0x43, 0xc9, 0x87, 0x1a, 0xfa,
		0x10, 0x80, 0x6e, 0xda, 0x5d, 0x8f, 0x95, 0x4e, 0x6c, 0x27, 0xce, 0x51, 0x09, 0xdd, 0xbc, 0xc8,
		0x2e, 0xdb, 0xf5, 0xfc, 0xfe, 0x14, 0xed, 0x07, 0x26, 0xa2, 0x0a, 0x57, 0x7a, 0x86, 0xa6, 0xa9,
		0xa1, 0xe5, 0x63, 0x46, 0x3a, 0x10, 0x98, 0x1f, 0x07, 0x49, 0x33, 0x74, 0x6c, 0x7a, 0xaa, 0xeb,
		0x39, 0x18, 0x75, 0x74, 0xb3, 0x4d, 0x53, 0x4d, 0xb6, 0x9a, 0xd9, 0x43, 0x86, 0x8b, 0x95, 0x09,
		0xd6, 0xdd, 0x14, 0xbd, 0x04, 0x41, 0x03, 0xc8, 0x09, 0x20, 0x46, 0x43, 0x08, 0xd6, 0xed, 0x23,
		0x2a, 0xbf, 0x92, 0x83, 0x7c, 0xa0, 0x00, 0x97, 0xcf, 0x42, 0xe1, 0x06, 0xba, 0x89, 0x54, 0x71,
		0xa8, 0x62, 0x9e, 0xc8, 0x13, 0xd9, 0x16, 0x3f, 0x58, 0x7d, 0x1c, 0xa6, 0xa9, 0x8a, 0xd5, 0xf5,
		0xb0, 0xa3, 0x6a, 0x06, 0x72, 0x5d, 0xea, 0xb4, 0x2c, 0x55, 0x95, 0x49, 0x5f, 0x83, 0x74, 0x2d,
		0x8b, 0x1e, 0xf9, 0x12, 0x4c, 0x51, 0x44, 0xa7, 0x6b, 0x78, 0xba, 0x6d, 0x60, 0x95, 0x1c, 0xf3,
		0x5c, 0x9a, 0x72, 0x7c, 0xcb, 0x26, 0x89, 0xc6, 0x06, 0x57, 0x20, 0x16, 0xb9, 0xf2, 0x0a, 0x3c,
		0x44, 0x61, 0x6d, 0x6c, 0x62, 0x07, 0x79, 0x58, 0xc5, 0x9f, 0xed, 0x22, 0xc3, 0x55, 0x91, 0xd9,
		0x52, 0xf7, 0x91, 0xbb, 0x5f, 0x9a, 0x26, 0x04, 0x4b, 0xc9, 0x52, 0x42, 0x39, 0x4d, 0x14, 0x57,
		0xb9, 0x5e, 0x9d, 0xaa, 0xd5, 0xcc, 0xd6, 0x27, 0x91, 0xbb, 0x2f, 0x57, 0x61, 0x86, 0xb2, 0xb8,
		0x9e, 0xa3, 0x9b, 0x6d, 0x55, 0xdb, 0xc7, 0xda, 0x81, 0xda, 0xf5, 0xf6, 0xae, 0x94, 0x1e, 0x0c,
		0x3e, 0x9f, 0x5a, 0xd8, 0xa4, 0x3a, 0xcb, 0x44, 0x65, 0xc7, 0xdb, 0xbb, 0x22, 0x37, 0xa1, 0x40,
		0x26, 0xa3, 0xa3, 0xdf, 0xc6, 0xea, 0x9e, 0xe5, 0xd0, 0x1c, 0x5a, 0x1c, 0xb2, 0x35, 0x05, 0x3c,
		0xb8, 0xd0, 0xe0, 0x80, 0x0d, 0xab, 0x85, 0xab, 0x99, 0xe6, 0x56, 0xbd, 0xbe, 0xa2, 0xe4, 0x05,
		0xcb, 0x75, 0xcb, 0x21, 0x01, 0xd5, 0xb6, 0x7c, 0x07, 0xe7, 0x59, 0x40, 0xb5, 0x2d, 0xe1, 0xde,
		0x4b, 0x30, 0xa5, 0x69, 0x6c, 0xcc, 0xba, 0xa6, 0xf2, 0xc3, 0x98, 0x5b, 0x92, 0x42, 0xce, 0xd2,
		0xb4, 0x55, 0xa6, 0xc0, 0x63, 0xdc, 0x95, 0xaf, 0xc2, 0x03, 0x3d, 0x67, 0x05, 0x81, 0x93, 0x03,
		0xa3, 0xec, 0x87, 0x5e, 0x82, 0x29, 0xfb, 0x70, 0x10, 0x28, 0x87, 0x9e, 0x68, 0x1f, 0xf6, 0xc3,
		0x9e, 0x82, 0x69, 0x7b, 0xdf, 0x1e, 0xc4, 0x3d, 0x1e, 0xc4, 0xc9, 0xf6, 0xbe, 0xdd, 0x0f, 0x7c,
		0x94, 0x9e, 0xcc, 0x1d, 0xac, 0x21, 0x0f, 0xb7, 0x4a, 0xa7, 0x82, 0xea, 0x81, 0x0e, 0x79, 0x11,
		0x24, 0x4d, 0x53, 0xb1, 0x89, 0x76, 0x0d, 0xac, 0x22, 0x07, 0x9b, 0xc8, 0x2d, 0x9d, 0x09, 0x2a,
		0x17, 0x35, 0xad, 0x4e, 0x7b, 0x6b, 0xb4, 0x53, 0x7e, 0x1c, 0x26, 0xad, 0xdd, 0x1b, 0x1a, 0x0b,
		0x49, 0xd5, 0x76, 0xf0, 0x9e, 0xfe, 0x52, 0xe9, 0x11, 0xea, 0xdf, 0x09, 0xd2, 0x41, 0x03, 0x72,
		0x8b, 0x8a, 0xe5, 0xc7, 0x40, 0xd2, 0xdc, 0x7d, 0xe4, 0xd8, 0x74, 0x4f, 0x76, 0x6d, 0xa4, 0xe1,
		0xd2, 0xa3, 0x4c, 0x95, 0xc9, 0x37, 0x85, 0x98, 0x2c, 0x09, 0xf7, 0x96, 0xbe, 0xe7, 0x09, 0xc6,
		0x73, 0x6c, 0x49, 0x50, 0x19, 0x67, 0x9b, 0x07, 0x89, 0xb8, 0x22, 0xf4, 0xe0, 0x79, 0xaa, 0x56,
		0xb4, 0xf7, 0xed, 0xe0, 0x73, 0x1f, 0x86, 0x71, 0xa2, 0xd9, 0x7b, 0xe8, 0x63, 0xac, 0x72, 0xb3,
		0xf7, 0x03, 0x4f, 0xbc, 0x08, 0x33, 0x44, 0xa9, 0x83, 0x3d, 0xd4, 0x42, 0x1e, 0x0a, 0x68, 0x7f,
		0x8c, 0x6a, 0x13, 0xbf, 0x6f, 0xf0, 0xce, 0x90, 0x9d, 0x4e, 0x77, 0xf7, 0xd0, 0x8f, 0xac, 0x27,
		0x99, 0x9d, 0x44, 0x26, 0x62, 0xeb, 0x7d, 0xab, 0xce, 0x2b, 0x55, 0x28, 0x04, 0x03, 0x5f, 0xce,
		0x01, 0x0b, 0x7d, 0x29, 0x41, 0xaa, 0xa0, 0xe5, 0xc6, 0x0a, 0xa9, 0x5f, 0x5e, 0xac, 0x4b, 0x49,
		0x52, 0x47, 0xad, 0xaf, 0x6d, 0xd7, 0x55, 0x65, 0x67, 0x73, 0x7b, 0x6d, 0xa3, 0x2e, 0xa5, 0x82,
		0x95, 0xfd, 0x77, 0x93, 0x50, 0x0c, 0x1f, 0xd2, 0xe4, 0x9f, 0x80, 0x53, 0xe2, 0x46, 0xc5, 0xc5,
		0x9e, 0x7a, 0x4b, 0x77, 0xe8, 0x5a, 0xec, 0x20, 0x96, 0x17, 0xfd, 0x68, 0x98, 0xe6, 0x5a, 0x4d,
		0xec, 0x3d, 0xa7, 0x3b, 0x64, 0xa5, 0x75, 0x90, 0x27, 0xaf, 0xc3, 0x19, 0xd3, 0x52, 0x5d, 0x0f,
		0x99, 0x2d, 0xe4, 0xb4, 0xd4, 0xde, 0x5d, 0x96, 0x8a, 0x34, 0x0d, 0xbb, 0xae, 0xc5, 0x72, 0xa0,
		0xcf, 0xf2, 0x11, 0xd3, 0x6a, 0x72, 0xe5, 0x5e, 0x72, 0xa8, 0x71, 0xd5, 0xbe, 0xc8, 0x4d, 0x1d,
		0x17, 0xb9, 0x0f, 0x42, 0xae, 0x83, 0x6c, 0x15, 0x9b, 0x9e, 0x73, 0x48, 0x4b, 0xf3, 0xac, 0x92,
		0xed, 0x20, 0xbb, 0x4e, 0xda, 0x1f, 0xcc, 0x09, 0xe9, 0x5f, 0x53, 0x50, 0x08, 0x96, 0xe7, 0xe4,
		0xb4, 0xa3, 0xd1, 0x04, 0x95, 0xa0, 0x5b, 0xd8, 0xc3, 0xf7, 0x2d, 0xe6, 0x17, 0x96, 0x49, 0xe6,
		0xaa, 0x8e, 0xb2, 0x5a, 0x58, 0x61, 0x48, 0x52, 0x35, 0x90, 0xd0, 0xc2, 0xac, 0xf6, 0xc8, 0x2a,
		0xbc, 0x25, 0xaf, 0xc2, 0xe8, 0x0d, 0x97, 0x72, 0x8f, 0x52, 0xee, 0x47, 0xee, 0xcf, 0xfd, 0x6c,
		0x93, 0x92, 0xe7, 0x9e, 0x6d, 0xaa, 0x9b, 0x0d, 0x65, 0xa3, 0xb6, 0xae, 0x70, 0xb8, 0x7c, 0x1a,
		0xd2, 0x06, 0xba, 0x7d, 0x18, 0xce, 0x71, 0x54, 0x14, 0xd7, 0xf1, 0xa7, 0x21, 0x7d, 0x0b, 0xa3,
		0x83, 0x70, 0x66, 0xa1, 0xa2, 0xf7, 0x31, 0xf4, 0x17, 0x21, 0x43, 0xfd, 0x25, 0x03, 0x70, 0x8f,
		0x49, 0x23, 0x72, 0x16, 0xd2, 0xcb, 0x0d, 0x85, 0x84, 0xbf, 0x04, 0x05, 0x26, 0x55, 0xb7, 0xd6,
		0xea, 0xcb, 0x75, 0x29, 0x59, 0xb9, 0x04, 0xa3, 0xcc, 0x09, 0x64, 0x69, 0xf8, 0x6e, 0x90, 0x46,
		0x78, 0x93, 0x73, 0x24, 0x44, 0xef, 0xce, 0xc6, 0x52, 0x5d, 0x91, 0x92, 0xc1, 0xe9, 0x75, 0xa1,
		0x10, 0x2c, 0xb8, 0x3f, 0x98, 0x98, 0xfa, 0x4e, 0x02, 0xf2, 0x81, 0x02, 0x9a, 0x54, 0x3e, 0xc8,
		0x30, 0xac, 0x5b, 0x2a, 0x32, 0x74, 0xe4, 0xf2, 0xa0, 0x00, 0x2a, 0xaa, 0x11, 0x49, 0xdc, 0x49,
		0xfb, 0x40, 0x8c, 0x7f, 0x2d, 0x01, 0x52, 0x7f, 0xed, 0xda, 0x67, 0x60, 0xe2, 0x43, 0x35, 0xf0,
		0xd5, 0x04, 0x14, 0xc3, 0x05, 0x6b, 0x9f, 0x79, 0x67, 0x3f, 0x54, 0xf3, 0xde, 0x4c, 0xc2, 0x78,
		0xa8, 0x4c, 0x8d, 0x6b, 0xdd, 0x67, 0x61, 0x52, 0x6f, 0xe1, 0x8e, 0x6d, 0x79, 0xd8, 0xd4, 0x0e,
		0x55, 0x03, 0xdf, 0xc4, 0x46, 0xa9, 0x42, 0x37, 0x8a, 0xc5, 0xfb, 0x17, 0xc2, 0x0b, 0x6b, 0x3d,
		0xdc, 0x3a, 0x81, 0x55, 0xa7, 0xd6, 0x56, 0xea, 0x1b, 0x5b, 0x8d, 0xed, 0xfa, 0xe6, 0xf2, 0x0b,
		0xea, 0xce, 0xe6, 0x4f, 0x6d, 0x36, 0x9e, 0xdb, 0x54, 0x24, 0xbd, 0x4f, 0xed, 0x7d, 0x5c, 0xea,
		0x5b, 0x20, 0xf5, 0x1b, 0x25, 0x9f, 0x82, 0x61, 0x66, 0x49, 0x23, 0xf2, 0x14, 0x4c, 0x6c, 0x36,
		0xd4, 0xe6, 0xda, 0x4a, 0x5d, 0xad, 0x5f, 0xbf, 0x5e, 0x5f, 0xde, 0x6e, 0xb2, 0xab, 0x0d, 0x5f,
		0x7b, 0x3b, 0xbc, 0xa8, 0x5f, 0x49, 0xc1, 0xd4, 0x10, 0x4b, 0xe4, 0x1a, 0x3f, 0x94, 0xb0, 0x73,
		0xd2, 0x93, 0x71, 0xac, 0x5f, 0x20, 0x55, 0xc1, 0x16, 0x72, 0x3c, 0x7e, 0x86, 0x79, 0x0c, 0x88,
		0x97, 0x4c, 0x4f, 0xdf, 0xd3, 0xb1, 0xc3, 0xaf, 0x8c, 0xd8, 0x49, 0x65, 0xa2, 0x27, 0x67, 0xb7,
		0x46, 0x1f, 0x03, 0xd9, 0xb6, 0x5c, 0xdd, 0xd3, 0x6f, 0x62, 0x55, 0x37, 0xc5, 0xfd, 0x12, 0x39,
		0xb9, 0xa4, 0x15, 0x49, 0xf4, 0xac, 0x99, 0x9e, 0xaf, 0x6d, 0xe2, 0x36, 0xea, 0xd3, 0x26, 0x1b,
		0x78, 0x4a, 0x91, 0x44, 0x8f, 0xaf, 0x7d, 0x16, 0x0a, 0x2d, 0xab, 0x4b, 0xca, 0x39, 0xa6, 0x47,
		0xf2, 0x45, 0x42, 0xc9, 0x33, 0x99, 0xaf, 0xc2, 0x0b, 0xf5, 0xde, 0xc5, 0x56, 0x41, 0xc9, 0x33,
		0x19, 0x53, 0x39, 0x07, 0x13, 0xa8, 0xdd, 0x76, 0x08, 0xb9, 0x20, 0x62, 0x47, 0x8f, 0xa2, 0x2f,
		0xa6, 0x8a, 0xb3, 0xcf, 0x42, 0x56, 0xf8, 0x81, 0xa4, 0x64, 0xe2, 0x09, 0xd5, 0x66, 0xe7, 0xe9,
		0xe4, 0x7c, 0x4e, 0xc9, 0x9a, 0xa2, 0xf3, 0x2c, 0x14, 0x74, 0x57, 0xed, 0xdd, 0xd3, 0x27, 0xe7,
		0x92, 0xf3, 0x59, 0x25, 0xaf, 0xbb, 0xfe, 0x1d, 0x67, 0xe5, 0xf5, 0x24, 0x14, 0xc3, 0xef, 0x19,
		0xe4, 0x15, 0xc8, 0x1a, 0x96, 0x86, 0x68, 0x68, 0xb1, 0x97, 0x5c, 0xf3, 0x11, 0xaf, 0x26, 0x16,
		0xd6, 0xb9, 0xbe, 0xe2, 0x23, 0x67, 0xff, 0x39, 0x01, 0x59, 0x21, 0x96, 0x67, 0x20, 0x6d, 0x23,
		0x6f, 0x9f, 0xd2, 0x65, 0x96, 0x92, 0x52, 0x42, 0xa1, 0x6d, 0x22, 0x77, 0x6d, 0x64, 0xd2, 0x10,
		0xe0, 0x72, 0xd2, 0x26, 0xf3, 0x6a, 0x60, 0xd4, 0xa2, 0xe7, 0x1a, 0xab, 0xd3, 0xc1, 0xa6, 0xe7,
		0x8a, 0x79, 0xe5, 0xf2, 0x65, 0x2e, 0x96, 0x9f, 0x80, 0x49, 0xcf, 0x41, 0xba, 0x11, 0xd2, 0x4d,
		0x53, 0x5d, 0x49, 0x74, 0xf8, 0xca, 0x55, 0x38, 0x2d, 0x78, 0x5b, 0xd8, 0x43, 0xda, 0x3e, 0x6e,
		0xf5, 0x40, 0xa3, 0xf4, 0xfe, 0xe2, 0x14, 0x57, 0x58, 0xe1, 0xfd, 0x02, 0x5b, 0xf9, 0x7e, 0x02,
		0x26, 0xc5, 0x49, 0xac, 0xe5, 0x3b, 0x6b, 0x03, 0x00, 0x99, 0xa6, 0xe5, 0x05, 0xdd, 0x35, 0x18,
		0xca, 0x03, 0xb8, 0x85, 0x9a, 0x0f, 0x52, 0x02, 0x04, 0xb3, 0x1d, 0x80, 0x5e, 0xcf, 0xb1, 0x6e,
		0x3b, 0x03, 0x79, 0xfe, 0x12, 0x89, 0xbe, 0x89, 0x64, 0x67, 0x77, 0x60, 0x22, 0x72, 0x64, 0x93,
		0xa7, 0x21, 0xb3, 0x8b, 0xdb, 0xba, 0xc9, 0xaf, 0x86, 0x59, 0x43, 0xdc, 0xb0, 0xa4, 0xfd, 0x1b,
		0x96, 0xa5, 0xcf, 0xc0, 0x94, 0x66, 0x75, 0xfa, 0xcd, 0x5d, 0x92, 0xfa, 0xee, 0x0f, 0xdc, 0x4f,
		0x26, 0x5e, 0x84, 0x5e, 0x89, 0xf9, 0x6e, 0x22, 0xf1, 0xa5, 0x64, 0x6a, 0x75, 0x6b, 0xe9, 0xab,
		0xc9, 0xd9, 0x55, 0x06, 0xdd, 0x12, 0x23, 0x55, 0xf0, 0x9e, 0x81, 0x35, 0x62, 0x3d, 0x7c, 0xf9,
		0x09, 0x78, 0xb2, 0xad, 0x7b, 0xfb, 0xdd, 0xdd, 0x05, 0xcd, 0xea, 0x2c, 0xb6, 0xad, 0xb6, 0xd5,
		0x7b, 0xf9, 0x4a, 0x5a, 0xb4, 0x41, 0xff, 0xf1, 0x17, 0xb0, 0x39, 0x5f, 0x3a, 0x1b, 0xf9, 0xb6,
		0xb6, 0xba, 0x09, 0x53, 0x5c, 0x59, 0xa5, 0x6f, 0x80, 0xd8, 0xf1, 0x44, 0xbe, 0xef, 0xe5, 0x58,
		0xe9, 0xeb, 0x6f, 0xd1, 0x74, 0xad, 0x4c, 0x72, 0x28, 0xe9, 0x63, 0x27, 0x98, 0xaa, 0x02, 0x0f,
		0x84, 0xf8, 0xd8, 0xd2, 0xc4, 0x4e, 0x04, 0xe3, 0x77, 0x39, 0xe3, 0x54, 0x80, 0xb1, 0xc9, 0xa1,
		0xd5, 0x65, 0x18, 0x3f, 0x09, 0xd7, 0x3f, 0x72, 0xae, 0x02, 0x0e, 0x92, 0xac, 0xc2, 0x04, 0x25,
		0xd1, 0xba, 0xae, 0x67, 0x75, 0xe8, 0xbe, 0x77, 0x7f, 0x9a, 0x7f, 0x7a, 0x8b, 0xad, 0x95, 0x22,
		0x81, 0x2d, 0xfb, 0xa8, 0x6a, 0x15, 0xe8, 0x4b, 0xaf, 0x16, 0xd6, 0x8c, 0x08, 0x86, 0x37, 0xb8,
		0x21, 0xbe, 0x7e, 0xf5, 0xd3, 0x30, 0x4d, 0xfe, 0xd3, 0x6d, 0x29, 0x68, 0x49, 0xf4, 0x4d, 0x5a,
		0xe9, 0xfb, 0x2f, 0xb3, 0xe5, 0x38, 0xe5, 0x13, 0x04, 0x6c, 0x0a, 0xcc, 0x62, 0x1b, 0x7b, 0x1e,
		0x76, 0x5c, 0x15, 0x19, 0xc3, 0xcc, 0x0b, 0x5c, 0x45, 0x94, 0x3e, 0xff, 0x76, 0x78, 0x16, 0x57,
		0x19, 0xb2, 0x66, 0x18, 0xd5, 0x1d, 0x38, 0x35, 0x24, 0x2a, 0x62, 0x70, 0xbe, 0xc2, 0x39, 0xa7,
		0x07, 0x22, 0x83, 0xd0, 0x6e, 0x81, 0x90, 0xfb, 0x73, 0x19, 0x83, 0xf3, 0xf7, 0x39, 0xa7, 0xcc,
		0xb1, 0x62, 0x4a, 0x09, 0xe3, 0xb3, 0x30, 0x79, 0x13, 0x3b, 0xbb, 0x96, 0xcb, 0xaf, 0x7f, 0x62,
		0xd0, 0xbd, 0xca, 0xe9, 0x26, 0x38, 0x90, 0xde, 0x07, 0x11, 0xae, 0xab, 0x90, 0xdd, 0x43, 0x1a,
		0x8e, 0x41, 0xf1, 0x05, 0x4e, 0x31, 0x46, 0xf4, 0x09, 0xb4, 0x06, 0x85, 0xb6, 0xc5, 0x33, 0x53,
		0x34, 0xfc, 0x35, 0x0e, 0xcf, 0x0b, 0x0c, 0xa7, 0xb0, 0x2d, 0xbb, 0x6b, 0x90, 0xb4, 0x15, 0x4d,
		0xf1, 0x07, 0x82, 0x42, 0x60, 0x38, 0xc5, 0x09, 0xdc, 0xfa, 0x87, 0x82, 0xc2, 0x0d, 0xf8, 0xf3,
		0x19, 0xc8, 0x5b, 0xa6, 0x71, 0x68, 0x99, 0x71, 0x8c, 0xf8, 0x22, 0x67, 0x00, 0x0e, 0x21, 0x04,
		0xd7, 0x20, 0x17, 0x77, 0x22, 0xfe, 0xf8, 0x6d, 0xb1, 0x3c, 0xc4, 0x0c, 0xac, 0xc2, 0x84, 0xd8,
		0xa0, 0x74, 0xcb, 0x8c, 0x41, 0xf1, 0x65, 0x4e, 0x51, 0x0c, 0xc0, 0xf8, 0x30, 0x3c, 0xec, 0x7a,
		0x6d, 0x1c, 0x87, 0xe4, 0x75, 0x31, 0x0c, 0x0e, 0xe1, 0xae, 0xdc, 0xc5, 0xa6, 0xb6, 0x1f, 0x8f,
		0xe1, 0x2b, 0xc2, 0x95, 0x02, 0x43, 0x28, 0x96, 0x61, 0xbc, 0x83, 0x1c, 0x77, 0x1f, 0x19, 0xb1,
		0xa6, 0xe3, 0x4f, 0x38, 0x47, 0xc1, 0x07, 0x71, 0x8f, 0x74, 0xcd, 0x93, 0xd0, 0x7c, 0x55, 0x78,
		0x24, 0x00, 0xe3, 0x4b, 0xcf, 0xf5, 0xe8, 0x5d, 0xd9, 0x49, 0xd8, 0xfe, 0x54, 0x2c, 0x3d, 0x86,
		0xdd, 0x08, 0x32, 0x5e, 0x83, 0x9c, 0xab, 0xdf, 0x8e, 0x45, 0xf3, 0x67, 0x62, 0xa6, 0x29, 0x80,
		0x80, 0x5f, 0x80, 0xd3, 0x43, 0xd3, 0x44, 0x0c, 0xb2, 0x3f, 0xe7, 0x64, 0x33, 0x43, 0x52, 0x05,
		0xdf, 0x12, 0x4e, 0x4a, 0xf9, 0x17, 0x62, 0x4b, 0xc0, 0x7d, 0x5c, 0x5b, 0xe4, 0xac, 0xe0, 0xa2,
		0xbd, 0x93, 0x79, 0xed, 0x2f, 0x85, 0xd7, 0x18, 0x36, 0xe4, 0xb5, 0x6d, 0x98, 0xe1, 0x8c, 0x27,
		0x9b, 0xd7, 0xaf, 0x89, 0x8d, 0x95, 0xa1, 0x77, 0xc2, 0xb3, 0xfb, 0x19, 0x98, 0xf5, 0xdd, 0x29,
		0x8a, 0x52, 0x57, 0xed, 0x20, 0x3b, 0x06, 0xf3, 0xd7, 0x39, 0xb3, 0xd8, 0xf1, 0xfd, 0xaa, 0xd6,
		0xdd, 0x40, 0x36, 0x21, 0x7f, 0x1e, 0x4a, 0x82, 0xbc, 0x6b, 0x3a, 0x58, 0xb3, 0xda, 0xa6, 0x7e,
		0x1b, 0xb7, 0x62, 0x50, 0xff, 0x55, 0xdf, 0x54, 0xed, 0x04, 0xe0, 0x84, 0x79, 0x0d, 0x24, 0xbf,
		0x56, 0x51, 0xf5, 0x8e, 0x6d, 0x39, 0x5e, 0x04, 0xe3, 0x37, 0xc4, 0x4c, 0xf9, 0xb8, 0x35, 0x0a,
		0xab, 0xd6, 0x81, 0xbd, 0x40, 0x8e, 0x1b, 0x92, 0x7f, 0xcd, 0x89, 0xc6, 0x7b, 0x28, 0xbe, 0x71,
		0x68, 0x56, 0xc7, 0x46, 0x4e, 0x9c, 0xfd, 0xef, 0x6f, 0xc4, 0xc6, 0xc1, 0x21, 0x7c, 0xe3, 0xf0,
		0x0e, 0x6d, 0x4c, 0xb2, 0x7d, 0x0c, 0x86, 0x6f, 0x8a, 0x8d, 0x43, 0x60, 0x38, 0x85, 0x28, 0x18,
		0x62, 0x50, 0xfc, 0xad, 0xa0, 0x10, 0x18, 0x42, 0xf1, 0xa9, 0x5e, 0xa2, 0x75, 0x70, 0x5b, 0x77,
		0x3d, 0x87, 0x95, 0xc2, 0xf7, 0xa7, 0xfa, 0xd6, 0xdb, 0xe1, 0x22, 0x4c, 0x09, 0x40, 0xc9, 0x4e,
		0xc4, 0xaf, 0x50, 0xe9, 0x49, 0x29, 0xda, 0xb0, 0x6f, 0x8b, 0x9d, 0x28, 0x00, 0x23, 0xb6, 0x05,
		0x2a, 0x44, 0xe2, 0x76, 0x8d, 0x9c, 0x0f, 0x62, 0xd0, 0x7d, 0xa7, 0xcf, 0xb8, 0xa6, 0xc0, 0x12,
		0xce, 0x40, 0xfd, 0xd3, 0x35, 0x0f, 0xf0, 0x61, 0xac, 0xe8, 0xfc, 0xbb, 0xbe, 0xfa, 0x67, 0x87,
		0x21, 0xd9, 0x1e, 0x32, 0xd1, 0x57, 0x4f, 0xc9, 0x51, 0x9f, 0x0b, 0x95, 0x7e, 0xee, 0x1e, 0x1f,
		0x6f, 0xb8, 0x9c, 0xaa, 0xae, 0x93, 0x20, 0x0f, 0x17, 0x3d, 0xd1, 0x64, 0x2f, 0xdf, 0xf3, 0xe3,
		0x3c, 0x54, 0xf3, 0x54, 0xaf, 0xc3, 0x78, 0xa8, 0xe0, 0x89, 0xa6, 0xfa, 0x79, 0x4e, 0x55, 0x08,
		0xd6, 0x3b, 0xd5, 0x4b, 0x90, 0x26, 0xc5, 0x4b, 0x34, 0xfc, 0x17, 0x38, 0x9c, 0xaa, 0x57, 0x3f,
		0x01, 0x59, 0x51, 0xb4, 0x44, 0x43, 0x7f, 0x91, 0x43, 0x7d, 0x08, 0x81, 0x8b, 0x82, 0x25, 0x1a,
		0xfe, 0x4b, 0x02, 0x2e, 0x20, 0x04, 0x1e, 0xdf, 0x85, 0x7f, 0xff, 0xcb, 0x69, 0x9e, 0x74, 0x84,
		0xef, 0xae, 0xc1, 0x18, 0xaf, 0x54, 0xa2, 0xd1, 0x9f, 0xe3, 0x0f, 0x17, 0x88, 0xea, 0x53, 0x90,
		0x89, 0xe9, 0xf0, 0x5f, 0xe5, 0x50, 0xa6, 0x5f, 0x5d, 0x86, 0x7c, 0xa0, 0x3a, 0x89, 0x86, 0xff,
		0x1a, 0x87, 0x07, 0x51, 0xc4, 0x74, 0x5e, 0x9d, 0x44, 0x13, 0xfc, 0xba, 0x30, 0x9d, 0x23, 0x88,
		0xdb, 0x44, 0x61, 0x12, 0x8d, 0xfe, 0x0d, 0xe1, 0x75, 0x01, 0xa9, 0x3e, 0x03, 0x39, 0x3f, 0xd9,
		0x44, 0xe3, 0x7f, 0x93, 0xe3, 0x7b, 0x18, 0xe2, 0x81, 0x40, 0xb2, 0x8b, 0xa6, 0xf8, 0x2d, 0xe1,
		0x81, 0x00, 0x8a, 0x2c, 0xa3, 0xfe, 0x02, 0x26, 0x9a, 0xe9, 0xb7, 0xc5, 0x32, 0xea, 0xab, 0x5f,
		0xc8, 0x6c, 0xd2, 0x3d, 0x3f, 0x9a, 0xe2, 0x77, 0xc4, 0x6c, 0x52, 0x7d, 0x62, 0x46, 0x7f, 0x45,
		0x10, 0xcd, 0xf1, 0xbb, 0xc2, 0x8c, 0xbe, 0x82, 0xa0, 0xba, 0x05, 0xf2, 0x60, 0x35, 0x10, 0xcd,
		0xf7, 0x7b, 0x9c, 0x6f, 0x72, 0xa0, 0x18, 0xa8, 0x3e, 0x07, 0x33, 0xc3, 0x2b, 0x81, 0x68, 0xd6,
		0xcf, 0xdf, 0xeb, 0x3b, 0xbb, 0x05, 0x0b, 0x81, 0xea, 0x76, 0x2f, 0xa5, 0x04, 0xab, 0x80, 0x68,
		0xda, 0x57, 0xee, 0x85, 0x37, 0xee, 0x60, 0x11, 0x50, 0xad, 0x01, 0xf4, 0x12, 0x70, 0x34, 0xd7,
		0xab, 0x9c, 0x2b, 0x00, 0x22, 0x4b, 0x83, 0xe7, 0xdf, 0x68, 0xfc, 0x17, 0xc4, 0xd2, 0xe0, 0x08,
		0xb2, 0x34, 0x44, 0xea, 0x8d, 0x46, 0xbf, 0x26, 0x96, 0x86, 0x80, 0x90, 0xc8, 0x0e, 0x64, 0xb7,
		0x68, 0x86, 0x2f, 0x8a, 0xc8, 0x0e, 0xa0, 0xaa, 0x9b, 0x30, 0x39, 0x90, 0x10, 0xa3, 0xa9, 0xbe,
		0xc4, 0xa9, 0xa4, 0xfe, 0x7c, 0x18, 0x4c, 0x5e, 0x3c, 0x19, 0x46, 0xb3, 0xfd, 0x51, 0x5f, 0xf2,
		0xe2, 0xb9, 0xb0, 0x7a, 0x0d, 0xb2, 0x66, 0xd7, 0x30, 0xc8, 0xe2, 0x91, 0xef, 0xff, 0x89, 0x5f,
		0xe9, 0xdf, 0xdf, 0xe3, 0xde, 0x11, 0x80, 0xea, 0x25, 0xc8, 0xe0, 0xce, 0x2e, 0x6e, 0x45, 0x21,
		0xff, 0xe3, 0x3d, 0xb1, 0x61, 0x12, 0xed, 0xea, 0x33, 0x00, 0xec, 0x6a, 0x84, 0xbe, 0xf6, 0x8b,
		0xc0, 0xfe, 0xe7, 0x7b, 0xfc, 0x9b, 0x9a, 0x1e, 0xa4, 0x47, 0xc0, 0xbe, 0xd0, 0xb9, 0x3f, 0xc1,
		0xdb, 0x61, 0x02, 0x3a, 0x23, 0x57, 0x61, 0xec, 0x86, 0x6b, 0x99, 0x1e, 0x6a, 0x47, 0xa1, 0xff,
		0x8b, 0xa3, 0x85, 0x3e, 0x71, 0x58, 0xc7, 0x72, 0xb0, 0x87, 0xda, 0x6e, 0x14, 0xf6, 0xbf, 0x39,
		0xd6, 0x07, 0x10, 0xb0, 0x86, 0x5c, 0x2f, 0xce, 0xb8, 0xff, 0x47, 0x80, 0x05, 0x80, 0x18, 0x4d,
		0xfe, 0x1f, 0xe0, 0xc3, 0x28, 0xec, 0x3b, 0xc2, 0x68, 0xae, 0x5f, 0xfd, 0x04, 0xe4, 0xc8, 0x5f,
		0xf6, 0xa1, 0x5c, 0x04, 0xf8, 0x47, 0x1c, 0xdc, 0x43, 0x90, 0x27, 0xbb, 0x5e, 0xcb, 0xd3, 0xa3,
		0x9d, 0xfd, 0xbf, 0x7c, 0xa6, 0x85, 0x7e, 0xb5, 0x06, 0x79, 0xd7, 0x6b, 0xb5, 0xba, 0xbc, 0x3e,
		0x8d, 0x80, 0xff, 0xdf, 0x7b, 0xfe, 0x95, 0x85, 0x8f, 0x21, 0xb3, 0x7d, 0xeb, 0xc0, 0xb3, 0x2d,
		0xfa, 0x9a, 0x23, 0x8a, 0xe1, 0x1e, 0x67, 0x08, 0x40, 0x96, 0xea, 0xc3, 0xaf, 0x6f, 0x61, 0xd5,
		0x5a, 0xb5, 0xd8, 0xc5, 0xed, 0x8b, 0x95, 0xe8, 0x1b, 0x58, 0xf8, 0x46, 0x0a, 0x4a, 0x9a, 0xd5,
		0xd9, 0xb5, 0xdc, 0x45, 0x13, 0xeb, 0xde, 0x3e, 0x76, 0x16, 0x3b, 0xc8, 0xe6, 0x77, 0xb2, 0xf9,
		0x0e, 0xb2, 0xf9, 0xe7, 0xb7, 0xee, 0xec, 0xc9, 0xee, 0x73, 0x2b, 0x3f, 0x0b, 0x63, 0x1b, 0xc8,
		0xde, 0xc6, 0xae, 0x27, 0x53, 0x4f, 0xd3, 0xcf, 0xb7, 0xf8, 0x25, 0xf9, 0xdc, 0x42, 0x80, 0x78,
		0x81, 0xab, 0x2d, 0x34, 0x3d, 0xa7, 0xe9, 0x39, 0xf4, 0x83, 0x02, 0x65, 0xd4, 0xa5, 0x8d, 0xd9,
		0xab, 0x90, 0x0f, 0x88, 0x65, 0x09, 0x52, 0x07, 0xf8, 0x90, 0x7f, 0xc0, 0x45, 0xfe, 0xca, 0xd3,
		0xbd, 0x2f, 0x2c, 0x89, 0x8c, 0x35, 0xaa, 0xc9, 0x2b, 0x89, 0xca, 0xd3, 0x30, 0x76, 0x1d, 0x1d,
		0xe0, 0x0d, 0x64, 0xcb, 0x17, 0x60, 0x0c, 0x9b, 0x9e, 0xa3, 0x63, 0x97, 0x1b, 0x70, 0x3a, 0x64,
		0x00, 0x57, 0x63, 0x4f, 0x16, 0x9a, 0x95, 0x75, 0x28, 0x04, 0x3b, 0xe2, 0x3e, 0x9b, 0x48, 0x2d,
		0xe2, 0x47, 0xfe, 0xd2, 0x82, 0x35, 0x96, 0x56, 0xde, 0xb8, 0x5b, 0x1e, 0xf9, 0xde, 0xdd, 0xf2,
		0xc8, 0xbf, 0xdc, 0x2d, 0x8f, 0xbc, 0x79, 0xb7, 0x9c, 0x78, 0xe7, 0x6e, 0x39, 0xf1, 0xee, 0xdd,
		0x72, 0xe2, 0xce, 0x51, 0x39, 0xf1, 0x95, 0xa3, 0x72, 0xe2, 0x6b, 0x47, 0xe5, 0xc4, 0xb7, 0x8e,
		0xca, 0x89, 0x37, 0x8e, 0xca, 0x23, 0xdf, 0x3b, 0x2a, 0x8f, 0xbc, 0x79, 0x54, 0x4e, 0xfc, 0xf0,
		0xa8, 0x3c, 0xf2, 0xce, 0x51, 0x39, 0xf1, 0xee, 0x51, 0x79, 0xe4, 0xce, 0x0f, 0xca, 0x23, 0xbb,
		0xa3, 0xec, 0x73, 0xe3, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x91, 0xbd, 0x2f, 0x42, 0xd3, 0x34,
		0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *MapTest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MapTest)
	if !ok {
		that2, ok := that.(MapTest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MapTest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MapTest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MapTest but is not nil && this == nil")
	}
	if len(this.StrStr) != len(that1.StrStr) {
		return fmt.Errorf("StrStr this(%v) Not Equal that(%v)", len(this.StrStr), len(that1.StrStr))
	}
	for i := range this.StrStr {
		if this.StrStr[i] != that1.StrStr[i] {
			return fmt.Errorf("StrStr this[%v](%v) Not Equal that[%v](%v)", i, this.StrStr[i], i, that1.StrStr[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MapTest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MapTest)
	if !ok {
		that2, ok := that.(MapTest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StrStr) != len(that1.StrStr) {
		return false
	}
	for i := range this.StrStr {
		if this.StrStr[i] != that1.StrStr[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FakeMap) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FakeMap)
	if !ok {
		that2, ok := that.(FakeMap)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FakeMap")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FakeMap but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FakeMap but is not nil && this == nil")
	}
	if len(this.Entries) != len(that1.Entries) {
		return fmt.Errorf("Entries this(%v) Not Equal that(%v)", len(this.Entries), len(that1.Entries))
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return fmt.Errorf("Entries this[%v](%v) Not Equal that[%v](%v)", i, this.Entries[i], i, that1.Entries[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FakeMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FakeMap)
	if !ok {
		that2, ok := that.(FakeMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FakeMapEntry) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FakeMapEntry)
	if !ok {
		that2, ok := that.(FakeMapEntry)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FakeMapEntry")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FakeMapEntry but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FakeMapEntry but is not nil && this == nil")
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if this.Other != that1.Other {
		return fmt.Errorf("Other this(%v) Not Equal that(%v)", this.Other, that1.Other)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FakeMapEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FakeMapEntry)
	if !ok {
		that2, ok := that.(FakeMapEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Other != that1.Other {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MapTest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mapdefaults.MapTest{")
	keysForStrStr := make([]string, 0, len(this.StrStr))
	for k := range this.StrStr {
		keysForStrStr = append(keysForStrStr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStrStr)
	mapStringForStrStr := "map[string]string{"
	for _, k := range keysForStrStr {
		mapStringForStrStr += fmt.Sprintf("%#v: %#v,", k, this.StrStr[k])
	}
	mapStringForStrStr += "}"
	if this.StrStr != nil {
		s = append(s, "StrStr: "+mapStringForStrStr+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FakeMap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&mapdefaults.FakeMap{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FakeMapEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&mapdefaults.FakeMapEntry{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Other: "+fmt.Sprintf("%#v", this.Other)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMap(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedMapTest(r randyMap, easy bool) *MapTest {
	this := &MapTest{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.StrStr = make(map[string]string)
		for i := 0; i < v1; i++ {
			this.StrStr[randStringMap(r)] = randStringMap(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMap(r, 2)
	}
	return this
}

func NewPopulatedFakeMap(r randyMap, easy bool) *FakeMap {
	this := &FakeMap{}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Entries = make([]*FakeMapEntry, v2)
		for i := 0; i < v2; i++ {
			this.Entries[i] = NewPopulatedFakeMapEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMap(r, 2)
	}
	return this
}

func NewPopulatedFakeMapEntry(r randyMap, easy bool) *FakeMapEntry {
	this := &FakeMapEntry{}
	this.Key = string(randStringMap(r))
	this.Value = string(randStringMap(r))
	this.Other = string(randStringMap(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMap(r, 4)
	}
	return this
}

type randyMap interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMap(r randyMap) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMap(r randyMap) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneMap(r)
	}
	return string(tmps)
}
func randUnrecognizedMap(r randyMap, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMap(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMap(dAtA []byte, r randyMap, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateMap(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMap(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMap(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMap(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *MapTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StrStr) > 0 {
		for k, v := range m.StrStr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMap(uint64(len(k))) + 1 + len(v) + sovMap(uint64(len(v)))
			n += mapEntrySize + 1 + sovMap(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FakeMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovMap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FakeMapEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMap(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMap(uint64(l))
	}
	l = len(m.Other)
	if l > 0 {
		n += 1 + l + sovMap(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMap(x uint64) (n int) {
	return sovMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MapTest) String() string {
	if this == nil {
		return "nil"
	}
	keysForStrStr := make([]string, 0, len(this.StrStr))
	for k := range this.StrStr {
		keysForStrStr = append(keysForStrStr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForStrStr)
	mapStringForStrStr := "map[string]string{"
	for _, k := range keysForStrStr {
		mapStringForStrStr += fmt.Sprintf("%v: %v,", k, this.StrStr[k])
	}
	mapStringForStrStr += "}"
	s := strings.Join([]string{`&MapTest{`,
		`StrStr:` + mapStringForStrStr + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FakeMap) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntries := "[]*FakeMapEntry{"
	for _, f := range this.Entries {
		repeatedStringForEntries += strings.Replace(f.String(), "FakeMapEntry", "FakeMapEntry", 1) + ","
	}
	repeatedStringForEntries += "}"
	s := strings.Join([]string{`&FakeMap{`,
		`Entries:` + repeatedStringForEntries + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FakeMapEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FakeMapEntry{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Other:` + fmt.Sprintf("%v", this.Other) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMap(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
